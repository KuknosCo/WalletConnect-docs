"use strict";(self.webpackChunkwalletconnect_docs=self.webpackChunkwalletconnect_docs||[]).push([[1058],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return k}});var r=n(7294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function u(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function a(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?u(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,l=function(t,e){if(null==t)return{};var n,r,l={},u=Object.keys(t);for(r=0;r<u.length;r++)n=u[r],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var u=Object.getOwnPropertySymbols(t);for(r=0;r<u.length;r++)n=u[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var c=r.createContext({}),i=function(t){var e=r.useContext(c),n=e;return t&&(n="function"==typeof t?t(e):a(a({},e),t)),n},p=function(t){var e=i(t.components);return r.createElement(c.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,l=t.mdxType,u=t.originalType,c=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),d=i(n),k=l,y=d["".concat(c,".").concat(k)]||d[k]||s[k]||u;return n?r.createElement(y,a(a({ref:e},p),{},{components:n})):r.createElement(y,a({ref:e},p))}));function k(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var u=n.length,a=new Array(u);a[0]=d;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=t,o.mdxType="string"==typeof t?t:l,a[1]=o;for(var i=2;i<u;i++)a[i]=n[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2733:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return o},metadata:function(){return i},toc:function(){return s}});var r=n(7462),l=n(3366),u=(n(7294),n(3905)),a=["components"],o={},c="Curve Encryption",i={unversionedId:"client-api/curveEncryption",id:"version-2.0.0/client-api/curveEncryption",title:"Curve Encryption",description:"Encrypt data with kuknos public key.",source:"@site/versioned_docs/version-2.0.0/client-api/curveEncryption.md",sourceDirName:"client-api",slug:"/client-api/curveEncryption",permalink:"/WalletConnect-docs/client-api/curveEncryption",editUrl:"https://github.com/KuknosCo/WalletConnect-docs/versioned_docs/version-2.0.0/client-api/curveEncryption.md",tags:[],version:"2.0.0",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Sign Data",permalink:"/WalletConnect-docs/client-api/signData"},next:{title:"Curve Decryption",permalink:"/WalletConnect-docs/client-api/curveDecryption"}},p={},s=[{value:"Example",id:"example",level:3},{value:"Params",id:"params",level:3},{value:"Return",id:"return",level:3}],d={toc:s};function k(t){var e=t.components,n=(0,l.Z)(t,a);return(0,u.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,u.kt)("h1",{id:"curve-encryption"},"Curve Encryption"),(0,u.kt)("p",null,"Encrypt data with kuknos public key."),(0,u.kt)("h3",{id:"example"},"Example"),(0,u.kt)("div",null,(0,u.kt)("pre",null,(0,u.kt)("code",{parentName:"pre",className:"language-javascript"},"  try {\n        const response = await wallet.curveEncrypt({\n            data: 'plain text',\n            public: 'GDWNW72K5RSW77JTCPADH5EYL2VT4FLUNN43CLIXKEGORT7YO5JDLHLK'\n        }) \n        if(response.status === 'reject'){\n            throw new Error(response.message)\n        }\n        console.log(response.data)\n    } catch (error) {\n        console.log(error)\n    }\n"))),(0,u.kt)("h3",{id:"params"},"Params"),(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("th",null,"Name"),(0,u.kt)("th",null,"Type"),(0,u.kt)("th",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"data"),(0,u.kt)("td",null,"curveEncryptRequest"),(0,u.kt)("td",null,(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("th",null,"Name"),(0,u.kt)("th",null,"Type"),(0,u.kt)("th",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"data"),(0,u.kt)("td",null,"string"),(0,u.kt)("td",null,"plain Text data")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"public"),(0,u.kt)("td",null,"string"),(0,u.kt)("td",null,"Public key that you want to encrypted data with it")))))),(0,u.kt)("h3",{id:"return"},"Return"),(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("th",null,"Name"),(0,u.kt)("th",null,"Type"),(0,u.kt)("th",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"status"),(0,u.kt)("td",null,"boolean"),(0,u.kt)("td",null)),(0,u.kt)("tr",null,(0,u.kt)("td",null,"type"),(0,u.kt)("td",null,"actionType.curveEncrypt"),(0,u.kt)("td",null)),(0,u.kt)("tr",null,(0,u.kt)("td",null,"message"),(0,u.kt)("td",null,"string"),(0,u.kt)("td",null)),(0,u.kt)("tr",null,(0,u.kt)("td",null,"data"),(0,u.kt)("td",null,"curveEncryptResponse"),(0,u.kt)("td",null,(0,u.kt)("table",null,(0,u.kt)("tr",null,(0,u.kt)("th",null,"Name"),(0,u.kt)("th",null,"Type"),(0,u.kt)("th",null,"Description")),(0,u.kt)("tr",null,(0,u.kt)("td",null,"ciphertext"),(0,u.kt)("td",null,"string"),(0,u.kt)("td",null,"Encrypted Data")))))))}k.isMDXComponent=!0}}]);